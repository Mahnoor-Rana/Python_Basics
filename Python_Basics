import keyword
print(keyword.kwlist),(len(keyword.kwlist))

for i in range(10):
    print(i)
    
 if True:
    print('ML')
    c = 'as'
    
# loops
lst =[1,3,2,4]
p=1;
index=0
while index<len(lst):
    p*=lst[index]
    index+=1
print("product is {}".format(p))

#iterating loop over the list
num=[1,2,3,4]
index = 0
while index<len(num):
    print(num[index])
    index+=1
else:
    print("no item is in the list")


#for loop (prime num or not)
n = int(input("enter a num"))
isDivisible = False;
i=2;
while n%i==0:
    isDivisible = True
    print("{} is divisible by {}".format(n,i))
    i+=1
if isDivisible:
    print("{} is not a prime num".format(n))
else:
    print("{} is prine num".format(n))
    
    
    
#for loop and nested for loop
lst=[2,3]
p=1
for i in lst:
    p*=i
    
print("p is {}".format(p))

#range()
for i in range(10,20,4):
    print(i)
    
    lst=["jk","34"]
for i in lst:
    print(i)
    
    #iterating over the list
num=[1,2,3]
for i in num:
    print(i)
else:
    print("no")
    
    
# display all prime num in an interval
index1=10
index2=50
print("prime num btw {} is {} ".format(index1,index2))
for i in range(index1,index2):
    if i > 1:
        isDivisible=False
        for index in range(2,i):
            if i %index==0:
                isDivisible = True
        if not isDivisible:
            print(i)
            
#elif statements
n = 9
if n ==0:
    print("positive")
elif n==8:
    print("negative")
else:
    print("zero")
    
    
#if else statements
n = 9
if n ==0:
    print("positive")
else:
    print("negative")
    
#lets have a matrix....
m=[[1,2,3],
  [2,4,5],
   [2,5,3]
  ]
#transpose of a matrix
m_t = [ [row[i] for row in m] for  i in range(3)]
print(m_t)


# tuple
t = ('mahnoor',)
type(t)


#nested tuple 
t = ((1,2,3),[5,4,3])
print(t)
type(t)


#accessing elements in tuple 
t = ('mahnoor','is','a','girl')
print(t[-1])


#nested tuple 
t = ((1,2),('mahnoor','is','a','girl'))
print(t[1][2])


#slicing
print(t[1:])

# changing a tuple
t = (1,2,3,4,['mahnoor','is','a','girl'])
t[4][2]='good'
print(t)


#sets
s ={1,2,3}
s.add(4)
print(s)

#update 
s.update([2,6,7])
print(s)

#remove element
s.discard(2)
print(s)

#python set operation 
set1={1,2,3,4}
set2={5,6,7,8}
#union
s=set1 | set2
print(s)
#intersection
s=set1 & set2
print(s)
#difference
s=set1 - set2
print(s)
#symmetric difference
s=set1 ^ set2
print(s)
#issubset
s=(set1.issubset(set2))
print(s)
#frozenset
set1=frozenset({1,2,3,4})
set2=frozenset({5,6,7,8})
#union
s=set1 | set2
print(s)



#dictionary
my_dict={1:'apple',2:'mango'}
print(my_dict)


#dict access
my_dict={1:'apple',2:'mango'}
my_dict[1]

#another way of accessing
my_dict={1:'apple',2:'mango'}
my_dict.get(2)


#add element
my_dict={1:'apple',2:'mango'}
my_dict['degree']='M.Tech'
print(my_dict)


#fromkeys
sub={}.fromkeys(['maths','english'],9)
print(sub)
sub=sub.keys()


my_dict={1:'apple',2:'mango'}
print(my_dict.items())

#dict comprehension
my_dict={1:'apple',2:'mango'}
for i in my_dict.items():
    print(i)
    
#creating a new dic with onluy pairs  where the values is larger than 2
my_dict={'a':1,'b':2,'c':34}
n_dict={k:v for k,v in my_dict.items()if v>2}
print(n_dict)


my_dict={'a':1,'b':2,'c':34}
my_dict={k+'c': v**2 for k,v in my_dict.items()  if v >2}
print(my_dict)

#strings 
c="hello!!!"
print(c)

c[3]
c[2:]
#concatenation 
s1="what are you doing now??"
s2="i am doing my uni work"
s3=s1+s2
print(s3)

#iterating through loop
count= 0
for l in "hello world":
    if l == 'o':
        count+=1
print(count,'letters words')


c="MaDaM"
c = c.lower()
c1=reversed(c)
if list(c)==list(c1):
    print("it is a palindrome")
else:
    print("it is not a palindrome")



# to sort words in alphabetically order
c = "my name is mahoor"
word = c.split()
word.sort()
for word in word:
    print(word)
    
    
    
    
